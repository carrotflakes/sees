transform
(xs, makeMacro) = {
  type: "Program",
  body: transformStatements(xs, {}),
  sourceType: "script"
}
{
  transformStatements
  (("@macro":name:params:body):xs, macros) =
  transformStatements(xs, {
    ...macros,
    [name]: makeMacro([{expression} = expression](statementWithMacro("=>{}":params:body, macros)))
  }),
  (x:xs, macros) = statementWithMacro(x, macros):transformStatements(xs, macros),
  ([], _) = []
}

statementWithMacro(x, macros) = statement(x)
{

statement
(callee:args) | typeOf(args) == "list" && macros[callee] =
statement(macros[callee](args)),
("function":name:params:body) = {
  type: "FunctionDeclaration",
  id: eIdentifier(name),
  params: map(pattern, params),
  body: eBlockStat(map(statement, body)),
  generator: false,
  expression: false,
  async: false
},
("function*":name:params:body) = {
  type: "FunctionDeclaration",
  id: eIdentifier(name),
  params: map(pattern, params),
  body: eBlockStat(map(statement, body)),
  generator: true,
  expression: false,
  async: false
},
(kind:decls)
| elem(kind, ["var", "const", "let"]) = {
  type: "VariableDeclaration",
  declarations: map(
    [
      [name, expr] = {
        type: "VariableDeclarator",
        id: pattern(name),
        init: expression(expr)
      }
    ],
    decls),
  kind
},
("{}":body) = {
  type: "BlockStatement",
  body: map(statement, body)
},
["if", test, consequent] = {
  type: "IfStatement",
  test: expression(test),
  consequent: statement(consequent),
  alternate: null
},
["if", test, consequent, alternate] = {
  type: "IfStatement",
  test: expression(test),
  consequent: statement(consequent),
  alternate: statement(alternate)
},
("switch":expr:cases) = {
  type: "SwitchStatement",
  discriminant: expression(expr),
  cases: map([
      ("case":test:consequent) = {
        type: "SwitchCase",
        test: expression(test),
        consequent: map(statement, consequent)
      },
      ("default":consequent) = {
        type: "SwitchCase",
        test: null,
        consequent: map(statement, consequent)
      }
    ], cases)
},
["for", init, test, update, body] = {
  type: "ForStatement",
  init: [[] = null, _ = statement(init)](init),
  test: [[] = null, _ = expression(test)](test),
  update: [[] = null, _ = expression(update)](update),
  body: statement(body)
},
["return", expr] = {
  type: "ReturnStatement",
  argument: expression(expr)
},
["break"] = {
  type: "BreakStatement",
  label: null
},
["break", label] = {
  type: "BreakStatement",
  label: eIdentifier(label)
},
expr = {
  type: "ExpressionStatement",
  expression: expression(expr)
}

expression
("{}":body) = {
  type: "BlockStatement",
  body: map(statement, body)
},
["@dot", object, property] = {
  type: "MemberExpression",
  computed: false,
  object: expression(object),
  property: eIdentifier(property)
},
["[]", object, property] = {
  type: "MemberExpression",
  computed: true,
  object: expression(object),
  property: expression(property)
},
["=", left, right] = {
  type: "AssignmentExpression",
  operator: "=",
  left: expression(left),
  right: expression(right)
},
[op, arg]
| elem(op, ["++@", "--@", "@++", "@--"]) = {
  type: "UpdateExpression",
  operator: ["++@"="++", "--@"="--", "@++"="++", "@--"="--"](op),
  argument: expression(arg),
  prefix: ["++@"=true, "--@"=true, "@++"=false, "@--"=false](op)
},
[op, left, right]
| elem(op, ["+", "-", "*", "/", "%", "<", ">", "<=", ">=", "==", "!=", "===", "!=="]) = {
  type: "BinaryExpression",
  operator: op,
  left: expression(left),
  right: expression(right)
},
["=>", params, body] = {
  type: "ArrowFunctionExpression",
  id: null,
  params: map(pattern, params),
  body: expression(body),
  generator: false,
  expression: true,
  async: false
},
("=>{}":params:body) = {
  type: "ArrowFunctionExpression",
  id: null,
  params: map(pattern, params),
  body: eBlockStat(map(statement, body)),
  generator: false,
  expression: false,
  async: false
},
("[@]":elements) | typeOf(elements) == "list" = {
  type: "ArrayExpression",
  elements: map([
    "." = null,
    ["@dots", expr] = {
      type: "SpreadElement",
      argument: expression(expr)
    },
    expr = expression(expr)
  ], elements)
},
("{@}":properties) | typeOf(properties) == "list" = {
  type: "ObjectExpression",
  properties: map([
    ["@dots", expr] = {
      type: "SpreadElement",
      argument: expression(expr)
    },
    [keyExpr, valueExpr] = {
      type: "Property",
      key: expression(keyExpr),
      computed: false,
      value: expression(valueExpr),
      kind: "init",
      method: false,
      shorthand: false
    },
    ident | typeOf(ident) == "string" = {
      type: "Property",
      key: eIdentifier(ident),
      computed: false,
      value: eIdentifier(ident),
      kind: "init",
      method: false,
      shorthand: true
    }
  ], properties)
},
("new":callee:args) = {
  type: "NewExpression",
  callee: expression(callee),
  arguments: map(expression, args)
},
["@string", value] = {
  type: "Literal",
  value,
  raw: json(value)
},
(callee:args) | typeOf(args) == "list" && macros[callee] =
expression(macros[callee](args)),
(callee:args)
| typeOf(args) == "list" = {
  type: "CallExpression",
  callee: expression(callee),
  arguments: map(expression, args)
},
ident | typeOf(ident) == "string" = eIdentifier(ident),
"undefined" = {
  type: "Literal",
  value: undefined,
  raw: "\"undefined\""
},
value = {
  type: "Literal",
  value: v,
  raw: json(v)
}
{
  v = ["true" = true, "false" = false, "null" = null, x = x](value)
}

pattern
("[@]":elements) | typeOf(elements) == "list" = {
  type: "ArrayPattern",
  elements: map([
    "." = null,
    expr = pattern(expr)
  ], elements)
},
("{@}":properties) | typeOf(properties) == "list" = {
  type: "ObjectPattern",
  properties: map([
    [keyExpr, valueExpr] = {
      type: "Property",
      key: expression(keyExpr),
      computed: false,
      value: pattern(valueExpr),
      kind: "init",
      method: false,
      shorthand: false
    },
    ident | typeOf(ident) == "string" = {
      type: "Property",
      key: eIdentifier(ident),
      computed: false,
      value: eIdentifier(ident),
      kind: "init",
      method: false,
      shorthand: true
    }
  ], properties)
},
["@dots", expr] = {
  type: "RestElement",
  argument: pattern(expr)
},
ident = eIdentifier(ident)

}


eIdentifier(name) = {
  type: "Identifier",
  name
}

eBlockStat(body) = {
  type: "BlockStatement",
  body: body
}


map
  (f, x:xs) = f(x):map(f, xs),
  (_, [])   = []

foldl
  (f, r:rs)    = foldl(f, r, rs),
  (f, l, [])   = l,
  (f, l, r:rs) = foldl(f, f(l, r), rs)

filter
  (f, [])   = [],
  (f, x:xs)
    | f(x)  = x:filter(f, xs)
    | true  = filter(f, xs)

elem
  (x, [])   = false,
  (x, y:ys)
    | x == y = true
    | true = elem(x, ys)

length
  []     = 0,
  (_:xs) = 1 + length(xs)

concat xs = foldl([(x, y) = x + y], [], xs)

range
  (end) = range(0, end, 1),
  (start, end) = range(start, end, 1),
  (start, end, step)
    | start < end = start:range(start + step, end, step)
    | true        = []

zip
  ([], _) = [],
  (_, []) = [],
  (x:xs, y:ys) = [x, y]:zip(xs, ys)

enumerate xs = zip(range(length(xs)), xs)

nub xs = f(xs, [])
  {
    f ([], ys) = [],
      (x:xs, ys)
        | elem(x, ys) = f(xs, ys)
        | true        = x:f(xs, x:ys)
  }
